apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  labels:
    workflows.argoproj.io/creator: system-serviceaccount-argo-argo-server
  name: level1-crawler
spec:
  templates:
    - name: katana-service-from-domains
      inputs:
        parameters:
          - name: domains
      outputs: {}
      script:
        image: python:3.8
        command:
          - python
        args:
          - '-u'
        source: |
          import json
          import sys
          import urllib.parse
          import urllib.request

          domains = {{`"""{{inputs.parameters.domains}}"""`}}

          url = 'http://crawler-service'  # todo:config
          for domain in domains.split("\n"):
            print("%s ok\n" % domain)
            domain = domain.strip()
            if domain != "":
              domain = "http://" + domain
              request=urllib.request.Request(url, domain.encode())
              reponse=urllib.request.urlopen(request).read()

          # json.dump(domains.split("\n"), sys.stdout)


    - name: katana-service-from-file
      inputs:
        artifacts:
          - name: domains
            path: /tmp/domains
      outputs: {}
      script:
        image: python:3.8
        command:
          - python
        args:
          - '-u'
        source: |
          import json
          import sys
          import urllib.parse
          import urllib.request

          domains = open("/tmp/domains", "r").read()

          url = 'http://crawler-service'  # todo:config
          for domain in domains.split("\n"):
            domain = domain.strip()
            print(domain)

            if domain != "":
              domain = "http://" + domain
              request=urllib.request.Request(url, domain.encode())
              reponse=urllib.request.urlopen(request).read()
              print("ok\n")

          # json.dump(domains.split("\n"), sys.stdout)

    - name: katana-domains
      inputs:
        parameters:
          - name: domains
            description: '待扫描的域名列表，比如 apple.com换行facebook.com'
      steps:
        - - name: call-katana-binary
            template: katana-binary
            arguments:
              artifacts:
                - name: domains
                  raw:
                    data: {{`"{{inputs.parameters.domains}}"`}}

    - name: katana-binary-from-one-url
      inputs:
        parameters:
          - name: url
            description: '待扫描的url，比如 https://apple.com'
      script:
        image: projectdiscovery/katana:v1.0.1
        command:
          - "sh"
        source: |
          katana -v -jc -aff -u '{{`{{inputs.parameters.url}}`}}' -proxy http://{{.Values.xray_proxy_service}}:{{.Values.xray_proxy_port}} -system-chrome -headless -headless-options proxy-server=http://{{.Values.xray_proxy_service}}:{{.Values.xray_proxy_port}}
        resources: # limit the resources
          requests:
            cpu: 10m
          limits:
            cpu: 1200m

    - name: katana-binary   # 只会被其他template调用
      inputs:
        artifacts:
          - name: domains
      parallelism: 3
      steps:
        - - name: call-probe-80-443-from-file   # 过滤出存在web服务的主机
            arguments:
              artifacts:
                - name: hosts
                  from: {{`"{{inputs.artifacts.domains}}"`}}
            templateRef:
              name: level1-httpx
              template: probe-80-443-from-file
        - - name: call-get-file-lines-count
            arguments:
              artifacts:
                - name: file
                  from: {{`"{{steps.call-probe-80-443-from-file.outputs.artifacts.urls}}"`}}
            templateRef:
              name: util
              template: get-file-lines-count
        - - name: call-katana-from-file-index
            arguments:
              artifacts:
                - name: domains
                  from: {{`"{{steps.call-probe-80-443-from-file.outputs.artifacts.urls}}"`}}
              parameters:
                - name: index
                  value: {{`"{{item}}"`}}
            template: katana-from-file-index
            withSequence:
              count: {{`"{{steps.call-get-file-lines-count.outputs.result}}"`}}

    - name: katana-from-file-index  # katana根据行数索引扫描某个文件中的url。只会被其他template调用
      inputs:
        artifacts:
          - name: domains
        parameters:
          - name: index
      steps:
        - - name: call-get-file-line-from-index
            arguments:
              artifacts:
                - name: file
                  from: {{`"{{inputs.artifacts.domains}}"`}}
              parameters:
                - name: index
                  value: {{`"{{inputs.parameters.index}}"`}}
            templateRef:
              name: util
              template: get-file-line-from-index
        - - name: call-katana-binary-from-one-url
            template: katana-binary-from-one-url
            arguments:
              parameters:
                - name: url
                  value: {{`"{{steps.call-get-file-line-from-index.outputs.result}}"`}}

  ttlStrategy:
    secondsAfterCompletion: 3000
  podGC:
    strategy: OnPodCompletion
