apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config-fofa
data:
  port.conf: |
    input {
      file {
        path => "/tmp/port.txt"
        start_position => "beginning"
        sincedb_path => "/dev/null"
        exit_after_read => true
        mode => "read"
      }
    }
    filter {
      csv {
        columns =>  ["host", "port", "ip", "fofa-lastupdatetime"]
        convert => {
          "port" => "integer"
          "fofa-lastupdatetime" => "date"
        }
        add_field => {
          "source" => "fofa"
          "link" => "%{host}:%{port}"
        }
        remove_field => ["message", "path"]
      }
    }
    output {
      elasticsearch {
        hosts => ["elasticsearch-master:9200"]
        index => "port"
        document_id => "%{ip}_%{host}_%{port}"

        scripted_upsert => true
        action => "update"
        script_lang => "painless"
        script_type => "inline"
        script => "
          if(ctx.op == 'create') {
            ctx._source = params.event;
            ctx._source.first_create_time = params.event.get('@timestamp');
          } else {
            String old = ctx._source.get('first_create_time');
            ctx._source = params.event;
            ctx._source.last_update_time = params.event.get('@timestamp');
            ctx._source.first_create_time = old;
          }
        "
      }
    }
  subdomain.conf: |
    input {
      file {
        path => "/tmp/subdomain.txt"
        start_position => "beginning"
        sincedb_path => "/dev/null"
        exit_after_read => true
        mode => "read"
      }
    }
    filter {
      csv {
        columns =>  ["host", "fofa-lastupdatetime"]
        convert => {
          "fofa-lastupdatetime" => "date"
        }
        add_field => {
          "source" => "fofa"
        }
        remove_field => ["message", "path"]
      }
    }
    output {
      elasticsearch {
        hosts => ["elasticsearch-master:9200"]
        index => "subdomain"
        document_id => "%{host}"

        scripted_upsert => true
        action => "update"
        script_lang => "painless"
        script_type => "inline"
        script => "
          if(ctx.op == 'create') {
            ctx._source = params.event;
            ctx._source.first_create_time = params.event.get('@timestamp');
          } else {
            String old = ctx._source.get('first_create_time');
            ctx._source = params.event;
            ctx._source.last_update_time = params.event.get('@timestamp');
            ctx._source.first_create_time = old;
          }
        "
      }
    }
